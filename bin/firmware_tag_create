#!/bin/sh

# $Id:$

[ "$1" == "sample" ] && THIS_IS_SAMPLE_FIRMWARE="y"

source $HATHOR/config/basic_config
source $HATHOR/lib/libfirmwareinfo
source $HATHOR/lib/libmessage

DEVEL_SOURCE_FILE="devel_`echo $PRODUCTVER | sed -e 's/-[^-]*$//' -e 's/-/_/g'`"
cd ${PRODUCTDIR}
pushd build > /dev/null
source $DEVEL_SOURCE_FILE
popd > /dev/null

# skip directory check when releasing sample firmware
if [ "$THIS_IS_SAMPLE_FIRMWARE" != "y" ] ; then

	# check if current project directory is clean
	info "Check if everything is committed to subversion..."
	WORKING_COPY_NOT_CLEAN=`svn st | grep -E "^M|^A|^D|^C|^\!"`
	if [ -n "$WORKING_COPY_NOT_CLEAN" ]; then
		warn "Following files is modified:"
		warn "$WORKING_COPY_NOT_CLEAN"
		warn "Please commit all your code before proceeding!"
		exit 1
	fi

	WORKING_COPY_HAS_MISSING_FILE=`svn st | grep -E "^\?"`
	if [ -n "$WORKING_COPY_HAS_MISSING_FILE" ]; then
		info "You might want to add these files to subversion first."
		info "You could also use svn to ignore these files in working copy."
		echo "$WORKING_COPY_HAS_MISSING_FILE"
		read -p "Do you still want to continue? [y/N] " SKIP_MISSING_FILES
		if [ "$SKIP_MISSING_FILES" != "y" ] && [ "$SKIP_MISSING_FILES" != "Y" ] ; then
			exit 1
		fi
	fi
else
	FIRMWARE_VERSION=$PRODUCTVER
	hathor_get_firmware_type > /dev/null
	if [ "$HATHOR_FIRMWARE_TYPE" != "Sample" ] ; then
		warn "Your version number does not follow sample firmware rule ($PRODUCTVER)"
		read -p "Do you still want to continue? [y/N] " SKIP_INCORRECT_SAMPLE_FIRMWARE_VERSION_RULE
		if [ "$SKIP_INCORRECT_SAMPLE_FIRMWARE_VERSION_RULE" != "y" ] && [ "$SKIP_INCORRECT_SAMPLE_FIRMWARE_VERSION_RULE" != "Y" ] ; then
			exit 1
		fi
	fi

fi

# prepare to copy firmware to remote
SVN_WC_PATH=`pwd`
SVN_URL=`svn info | grep ^URL | sed -e 's/^.*http/http/'`
SVN_PROJECT_ROOT=`dirname $SVN_URL`
SVN_PROJECT_ROOT_BRANCH=`basename $SVN_PROJECT_ROOT`
if [ "$SVN_PROJECT_ROOT_BRANCH" == "branches" ] ; then
	SVN_PROJECT_ROOT=`dirname $SVN_PROJECT_ROOT`
fi

# tag to remote
SVN_TARGET_URL="$SVN_PROJECT_ROOT/tags/$PRODUCTVER"
SVN_TARGET_URL_EXIST=`svn ls $SVN_TARGET_URL 2> /dev/null`
echo "Tagging to $SVN_TARGET_URL"
if [ -n "$SVN_TARGET_URL_EXIST" ] ; then
	warn "Tag 路徑 $SVN_TARGET_URL 已存在!!"
	read -p "你是否想要強制更新這個 tag? [y/N] " FORCE_REMOVE_TAG
	if [ "$FORCE_REMOVE_TAG" != "y" ] && [ "$FORCE_REMOVE_TAG" != "Y" ]; then
		info "請手動移除 tag 後再重新 make firmware"
		exit 1
	else
		svn rm -q "$SVN_TARGET_URL" -m "Force remove tag"
		info "$SVN_TARGET_URL 已移除"
	fi
fi

RunCommandWithSpinningIndicator "svn up --depth=empty" "Updating working copy"
RunCommandWithSpinningIndicator "svn cp -q $SVN_WC_PATH $SVN_TARGET_URL -m \"$PRODUCTVER\"" "Tagging $SVN_TARGET_URL"

# check out firmware source code from remote
TEMP_PRODUCT_DIR="$TEMP_DIR/$PRODUCTVER"
RunCommandWithSpinningIndicator "svn co $SVN_TARGET_URL $TEMP_PRODUCT_DIR > /dev/null" "Checkout from $SVN_TARGET_URL"
